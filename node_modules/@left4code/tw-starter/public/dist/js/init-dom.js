/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/dom.js":
/*!***********************!*\
  !*** ./src/js/dom.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (dom = function () {
  var getNodeList = function getNodeList(arg) {
    if (typeof arg === "string" && arg.trim().slice(0, 1) !== "<") {
      return document.querySelectorAll(arg);
    } else if (typeof arg === "string" && arg.trim().slice(0, 1) === "<") {
      var _dom = domParser(arg);
      return [_dom];
    } else if (_typeof(arg) === "object" && arg instanceof NodeList) {
      return arg;
    } else if (_typeof(arg) === "object" && arg instanceof HTMLElement) {
      return [arg];
    } else if (_typeof(arg) === "object" && arg instanceof SVGElement) {
      return [arg];
    } else {
      return arg;
    }
  };
  var domParser = function domParser(arg) {
    var parser = new DOMParser(),
      content = "text/html",
      DOM = parser.parseFromString(arg, content);
    return DOM.body.childNodes[0];
  };
  var addEvent = function addEvent(nodeList, event, callback) {
    nodeList[event] = callback;
  };
  var uuidv4 = function uuidv4() {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
      var r = Math.random() * 16 | 0,
        v = c == "x" ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
  };
  var eventPath = function eventPath(evt) {
    var path = evt.composedPath && evt.composedPath() || evt.path,
      target = evt.target;
    if (path != null) {
      // Safari doesn't include Window, but it should.
      return path.indexOf(window) < 0 ? path.concat(window) : path;
    }
    if (target === window) {
      return [window];
    }
    function getParents(node, memo) {
      memo = memo || [];
      var parentNode = node.parentNode;
      if (!parentNode) {
        return memo;
      } else {
        return getParents(parentNode, memo.concat(parentNode));
      }
    }
    return [target].concat(getParents(target), window);
  };
  var addEvents = function addEvents(nodeList) {
    // .on()
    addEvent(nodeList, "on", function (arg1, arg2, arg3) {
      nodeList.forEach(function (node) {
        node.addEventListener(arg1, function (e) {
          var uuid = uuidv4();
          if (typeof arg2 === "string") {
            eventPath(e).every(function (parentNode) {
              if (parentNode.matches && parentNode.matches(arg2)) {
                parentNode[uuid] = arg3;
                parentNode[uuid](parentNode);
                delete parentNode[uuid];
                return false;
              } else {
                return true;
              }
            });
          } else {
            node[uuid] = arg2;
            node[uuid](e);
            delete node[uuid];
          }
        }, false);
      });
      return nodeList;
    });

    // .css()
    addEvent(nodeList, "css", function (arg1, arg2) {
      // Get values
      if (arg2 === undefined && _typeof(arg1) !== "object") {
        return getComputedStyle(nodeList[0])[arg1];
      }

      // Set values
      nodeList.forEach(function (node) {
        if (_typeof(arg1) === "object") {
          for (var _i = 0, _Object$entries = Object.entries(arg1); _i < _Object$entries.length; _i++) {
            var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
              key = _Object$entries$_i[0],
              val = _Object$entries$_i[1];
            node.style[key] = val;
          }
        } else {
          node.style[arg1] = arg2;
        }
      });
      addEvents(nodeList);
      return nodeList;
    });

    // .slideUp()
    addEvent(nodeList, "slideUp", function () {
      var arg1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 300;
      var arg2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};
      nodeList.forEach(function (node) {
        node.style.transitionProperty = "height, margin, padding";
        node.style.transitionDuration = arg1 + "ms";
        node.style.height = node.offsetHeight + "px";
        node.offsetHeight;
        node.style.overflow = "hidden";
        node.style.height = 0;
        node.style.paddingTop = 0;
        node.style.paddingBottom = 0;
        node.style.marginTop = 0;
        node.style.marginBottom = 0;
        window.setTimeout(function () {
          node.style.display = "none";
          node.style.removeProperty("height");
          node.style.removeProperty("padding-top");
          node.style.removeProperty("padding-bottom");
          node.style.removeProperty("margin-top");
          node.style.removeProperty("margin-bottom");
          node.style.removeProperty("overflow");
          node.style.removeProperty("transition-duration");
          node.style.removeProperty("transition-property");
          var uuid = uuidv4();
          node[uuid] = arg2;
          node[uuid](node);
          delete node[uuid];
        }, arg1);
      });
      addEvents(nodeList);
      return nodeList;
    });

    // .slideDown()
    addEvent(nodeList, "slideDown", function () {
      var arg1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 300;
      var arg2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};
      nodeList.forEach(function (node) {
        node.style.removeProperty("display");
        var display = window.getComputedStyle(node).display;
        if (display === "none") display = "block";
        node.style.display = display;
        var height = node.offsetHeight;
        node.style.overflow = "hidden";
        node.style.height = 0;
        node.style.paddingTop = 0;
        node.style.paddingBottom = 0;
        node.style.marginTop = 0;
        node.style.marginBottom = 0;
        node.offsetHeight;
        node.style.transitionProperty = "height, margin, padding";
        node.style.transitionDuration = arg1 + "ms";
        node.style.height = height + "px";
        node.style.removeProperty("padding-top");
        node.style.removeProperty("padding-bottom");
        node.style.removeProperty("margin-top");
        node.style.removeProperty("margin-bottom");
        window.setTimeout(function () {
          node.style.removeProperty("height");
          node.style.removeProperty("overflow");
          node.style.removeProperty("transition-duration");
          node.style.removeProperty("transition-property");
          var uuid = uuidv4();
          node[uuid] = arg2;
          node[uuid](node);
          delete node[uuid];
        }, arg1);
      });
      addEvents(nodeList);
      return nodeList;
    });

    // .fadeOut()
    addEvent(nodeList, "fadeOut", function () {
      var arg1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 300;
      var arg2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};
      nodeList.forEach(function (node) {
        node.style.opacity = 1;
        node.style.transitionProperty = "opacity";
        node.style.transitionDuration = arg1 + "ms";
        node.style.opacity = 0;
        window.setTimeout(function () {
          node.style.display = "none";
          node.style.removeProperty("transition-property");
          node.style.removeProperty("transition-duration");
          node.style.removeProperty("opacity");
          var uuid = uuidv4();
          node[uuid] = arg2;
          node[uuid](node);
          delete node[uuid];
        }, arg1);
      });
      addEvents(nodeList);
      return nodeList;
    });

    // .fadeIn()
    addEvent(nodeList, "fadeIn", function () {
      var arg1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 300;
      var arg2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};
      nodeList.forEach(function (node) {
        var display = window.getComputedStyle(node).display;
        if (display === "none") display = "block";
        node.style.display = display;
        node.style.opacity = 0;
        node.style.transitionProperty = "opacity";
        node.style.transitionDuration = arg1 + "ms";
        window.setTimeout(function () {
          node.style.opacity = 1;
          window.setTimeout(function () {
            node.style.removeProperty("transition-property");
            node.style.removeProperty("transition-duration");
            node.style.removeProperty("opacity");
          }, arg1);
          var uuid = uuidv4();
          node[uuid] = arg2;
          node[uuid](node);
          delete node[uuid];
        }, arg1);
      });
      addEvents(nodeList);
      return nodeList;
    });

    // .hide()
    addEvent(nodeList, "hide", function () {
      nodeList.forEach(function (node) {
        node.style.display = "none";
      });
      addEvents(nodeList);
      return nodeList;
    });

    // .show()
    addEvent(nodeList, "show", function () {
      nodeList.forEach(function (node) {
        if (node.style.display === "none") {
          node.style.display = "block";
        }
      });
      addEvents(nodeList);
      return nodeList;
    });

    // .clone()
    addEvent(nodeList, "clone", function () {
      var clonedNodes = [];
      nodeList.forEach(function (node) {
        clonedNodes.push(node.cloneNode(true));
      });
      addEvents(clonedNodes);
      return clonedNodes;
    });

    // .each()
    addEvent(nodeList, "each", function (arg1) {
      nodeList.forEach(function (node, index) {
        var uuid = uuidv4();
        node[uuid] = arg1;
        node[uuid](index, node);
        delete node[uuid];
      });
      addEvents(nodeList);
      return nodeList;
    });

    // .find()
    addEvent(nodeList, "find", function (arg1) {
      var results = [];
      nodeList.forEach(function (node) {
        var matchedNodes = node.querySelectorAll(arg1);
        if (matchedNodes.length) {
          matchedNodes.forEach(function (matchedNode) {
            results.push(matchedNode);
          });
        }
      });
      addEvents(results);
      return results;
    });

    // .hasClass()
    addEvent(nodeList, "hasClass", function (arg1) {
      var found = false;
      nodeList.forEach(function (node) {
        if (node.classList.contains(arg1)) found = true;
      });
      return found;
    });

    // .removeClass()
    addEvent(nodeList, "removeClass", function (arg1) {
      if (arg1.length) {
        arg1.split(" ").forEach(function (classname) {
          nodeList.forEach(function (node) {
            node.classList.remove(classname);
          });
        });
      }
      addEvents(nodeList);
      return nodeList;
    });

    // .addClass()
    addEvent(nodeList, "addClass", function (arg1) {
      if (arg1.length) {
        arg1.split(" ").forEach(function (classname) {
          nodeList.forEach(function (node) {
            node.classList.add(classname);
          });
        });
      }
      addEvents(nodeList);
      return nodeList;
    });

    // .is()
    addEvent(nodeList, "is", function (arg1) {
      if (typeof arg1 === "string") {
        return (nodeList[0].matches || nodeList[0].matchesSelector || nodeList[0].msMatchesSelector || nodeList[0].mozMatchesSelector || nodeList[0].webkitMatchesSelector || nodeList[0].oMatchesSelector).call(nodeList[0], arg1);
      } else {
        return nodeList[0] === arg1;
      }
    });

    // .attr()
    addEvent(nodeList, "attr", function (arg1, arg2) {
      if (arg2 === undefined && _typeof(arg1) !== "object") {
        if (nodeList[0] !== undefined) {
          var attr = nodeList[0].getAttribute(arg1);
          return attr === null ? undefined : attr;
        } else {
          return undefined;
        }
      }
      nodeList.forEach(function (node) {
        if (_typeof(arg1) === "object") {
          for (var _i2 = 0, _Object$entries2 = Object.entries(arg1); _i2 < _Object$entries2.length; _i2++) {
            var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),
              key = _Object$entries2$_i[0],
              val = _Object$entries2$_i[1];
            node.setAttribute(key, val);
          }
        } else {
          node.setAttribute(arg1, arg2);
        }
      });
      addEvents(nodeList);
      return nodeList;
    });

    // .removeAttr()
    addEvent(nodeList, "removeAttr", function (arg1) {
      nodeList.forEach(function (node) {
        node.removeAttribute(arg1);
      });
      addEvents(nodeList);
      return nodeList;
    });

    // .data()
    addEvent(nodeList, "data", function (arg1, arg2) {
      if (arg2 === undefined) {
        var attr = nodeList[0].getAttribute("data-".concat(arg1));
        return attr === null ? undefined : attr;
      }
      nodeList.forEach(function (node) {
        node.setAttribute("data-".concat(arg1), arg2);
      });
      addEvents(nodeList);
      return nodeList;
    });

    // .width()
    addEvent(nodeList, "width", function (arg1) {
      if (arg1 === undefined) {
        if (nodeList === window) {
          return parseInt(window.innerWidth);
        } else {
          return typeof nodeList[0] !== "undefined" ? parseInt(getComputedStyle(nodeList[0])["width"]) : null;
        }
      }
      if (nodeList === window) {
        window.resizeTo(arg1, window.innerHeight);
      } else {
        nodeList.forEach(function (node) {
          node.style["width"] = arg1;
        });
      }
      addEvents(nodeList);
      return nodeList;
    });

    // .height()
    addEvent(nodeList, "height", function (arg1) {
      if (arg1 === undefined) {
        if (nodeList === window) {
          return parseInt(window.innerHeight);
        } else {
          return typeof nodeList[0] !== "undefined" ? parseInt(getComputedStyle(nodeList[0])["height"]) : null;
        }
      }
      if (nodeList === window) {
        window.resizeTo(window.innerWidth, arg1);
      } else {
        nodeList.forEach(function (node) {
          node.style["height"] = arg1;
        });
      }
      addEvents(nodeList);
      return nodeList;
    });

    // .css()
    addEvent(nodeList, "css", function (arg1, arg2) {
      if (arg2 === undefined && _typeof(arg1) !== "object") {
        return getComputedStyle(nodeList[0])[arg1];
      }
      nodeList.forEach(function (node) {
        if (_typeof(arg1) === "object") {
          for (var _i3 = 0, _Object$entries3 = Object.entries(arg1); _i3 < _Object$entries3.length; _i3++) {
            var _Object$entries3$_i = _slicedToArray(_Object$entries3[_i3], 2),
              key = _Object$entries3$_i[0],
              val = _Object$entries3$_i[1];
            node.style[key] = val;
          }
        } else {
          node.style[arg1] = arg2;
        }
      });
      addEvents(nodeList);
      return nodeList;
    });

    // .replaceWith()
    addEvent(nodeList, "replaceWith", function (arg1) {
      var replacerNodes = [];
      var argumentTypes = getNodeList(arg1);
      nodeList.forEach(function (node, key) {
        argumentTypes.forEach(function (replacerNode) {
          var dom = replacerNode;
          if (key > 0) {
            dom = replacerNode.cloneNode(true);
          }
          node.parentNode.insertBefore(dom, node.nextSibling);
          replacerNodes.push(dom);
        });
        node.remove();
      });
      addEvents(replacerNodes);
      return replacerNodes;
    });

    // .insertAfter()
    addEvent(nodeList, "insertAfter", function (arg1) {
      var insertedNodes = [];
      var argumentTypes = getNodeList(arg1);
      nodeList.forEach(function (node) {
        argumentTypes.forEach(function (targetNode, key) {
          var dom = node;
          if (key > 0) {
            dom = node.cloneNode(true);
          }
          targetNode.parentNode.insertBefore(dom, targetNode.nextSibling);
          insertedNodes.push(dom);
        });
      });
      addEvents(insertedNodes);
      return insertedNodes;
    });

    // .appendTo()
    addEvent(nodeList, "appendTo", function (arg1) {
      var appendedNodes = [];
      var argumentTypes = getNodeList(arg1);
      nodeList.forEach(function (node) {
        argumentTypes.forEach(function (targetNode, key) {
          var dom = node;
          if (key > 0) {
            dom = node.cloneNode(true);
          }
          targetNode.appendChild(dom);
          appendedNodes.push(dom);
        });
      });
      addEvents(appendedNodes);
      return appendedNodes;
    });

    // .append()
    addEvent(nodeList, "append", function (arg1) {
      var argumentTypes = getNodeList(arg1);
      nodeList.forEach(function (node, key) {
        argumentTypes.forEach(function (appendNode) {
          var dom = appendNode;
          if (key > 0) {
            dom = appendNode.cloneNode(true);
          }
          node.appendChild(dom);
        });
      });
      addEvents(nodeList);
      return nodeList;
    });

    // .remove()
    addEvent(nodeList, "remove", function () {
      nodeList.forEach(function (node) {
        if (node.parentNode !== null) {
          node.parentNode.removeChild(node);
        }
      });
      addEvents(nodeList);
      return nodeList;
    });

    // .first()
    addEvent(nodeList, "first", function () {
      var firstNode = nodeList[0] !== undefined ? [nodeList[0]] : [];
      addEvents(firstNode);
      return firstNode;
    });

    // .last()
    addEvent(nodeList, "last", function () {
      var lastNodeList = nodeList[nodeList.length - 1] !== undefined ? [nodeList[nodeList.length - 1]] : [];
      addEvents(lastNodeList);
      return lastNodeList;
    });

    // .val()
    addEvent(nodeList, "val", function (arg1) {
      if (arg1 === undefined) {
        if (nodeList[0] instanceof HTMLSelectElement && nodeList[0].multiple) {
          var selectedOptions = [];
          var _iterator = _createForOfIteratorHelper(nodeList[0].selectedOptions),
            _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var selectedOption = _step.value;
              selectedOptions.push(selectedOption.value);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          return selectedOptions;
        } else {
          return nodeList[0].value;
        }
      }
      nodeList.forEach(function (node) {
        if (node instanceof HTMLSelectElement) {
          node.value = "";
          if (_typeof(arg1) !== "object") {
            arg1 = [arg1];
          }
          var _iterator2 = _createForOfIteratorHelper(arg1),
            _step2;
          try {
            var _loop = function _loop() {
              var value = _step2.value;
              var selectedOption = Array.from(node).find(function (option) {
                return option.value == value;
              });
              if (selectedOption !== undefined) {
                selectedOption.selected = true;
              }
            };
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              _loop();
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        } else {
          node.value = arg1;
        }
      });
      addEvents(nodeList);
      return nodeList;
    });

    // .html()
    addEvent(nodeList, "html", function (arg1) {
      if (arg1 === undefined) {
        return nodeList[0].innerHTML;
      }
      nodeList.forEach(function (node) {
        node.innerHTML = arg1;
      });
      addEvents(nodeList);
      return nodeList;
    });

    // .text()
    addEvent(nodeList, "text", function (arg1) {
      if (arg1 === undefined) {
        return nodeList[0].textContent;
      }
      nodeList.forEach(function (node) {
        node.textContent = arg1;
      });
      addEvents(nodeList);
      return nodeList;
    });

    // .filter()
    addEvent(nodeList, "filter", function (arg1) {
      var results = [];
      nodeList.forEach(function (node, index) {
        var uuid = uuidv4();
        node[uuid] = arg1;
        var filter = node[uuid](index, node);
        delete node[uuid];
        if (filter) {
          results.push(node);
        }
      });
      addEvents(results);
      return results;
    });

    // .closest()
    addEvent(nodeList, "closest", function (arg1) {
      var results = [];
      nodeList.forEach(function (node) {
        var matchedNode = node.closest(arg1);
        if (matchedNode !== null && !results.filter(function (resNode) {
          return resNode === matchedNode;
        }).length) results.push(matchedNode);
      });
      addEvents(results);
      return results;
    });

    // .children()
    addEvent(nodeList, "children", function (arg1) {
      var results = [];
      nodeList.forEach(function (node) {
        var _iterator3 = _createForOfIteratorHelper(node.children),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var matchedNode = _step3.value;
            if (arg1 === undefined) {
              results.push(matchedNode);
            } else {
              var _iterator4 = _createForOfIteratorHelper(node.querySelectorAll(arg1)),
                _step4;
              try {
                for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                  var childNode = _step4.value;
                  if (childNode === matchedNode) results.push(childNode);
                }
              } catch (err) {
                _iterator4.e(err);
              } finally {
                _iterator4.f();
              }
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      });
      addEvents(results);
      return results;
    });

    // .parent()
    addEvent(nodeList, "parent", function () {
      var results = [];
      nodeList.forEach(function (node) {
        var matchedNode = node.parentNode;
        if (matchedNode !== null && !results.filter(function (resNode) {
          return resNode === matchedNode;
        }).length) results.push(matchedNode);
      });
      addEvents(results);
      return results;
    });

    // .prev()
    addEvent(nodeList, "prev", function () {
      var results = [];
      nodeList.forEach(function (node) {
        if (node.previousElementSibling !== null) {
          results.push(node.previousElementSibling);
        }
      });
      addEvents(results);
      return results;
    });

    // .next()
    addEvent(nodeList, "next", function () {
      var results = [];
      nodeList.forEach(function (node) {
        if (node.nextElementSibling !== null) {
          results.push(node.nextElementSibling);
        }
      });
      addEvents(results);
      return results;
    });

    // .off()
    addEvent(nodeList, "off", function () {
      var results = [];
      nodeList.forEach(function (node) {
        var dom = node.cloneNode(true);
        node.parentNode.replaceChild(dom, node);
        results.push(dom);
      });
      addEvents(results);
      return results;
    });
  };
  return window.dom = function (arg) {
    var nodeList = getNodeList(arg);
    addEvents(nodeList);
    return nodeList;
  };
}());

/***/ }),

/***/ "./src/js/init.js":
/*!************************!*\
  !*** ./src/js/init.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom */ "./src/js/dom.js");

window.$ = _dom__WEBPACK_IMPORTED_MODULE_0__["default"];

/***/ }),

/***/ "./src/css/starter.css":
/*!*****************************!*\
  !*** ./src/css/starter.css ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/public/dist/js/init-dom": 0,
/******/ 			"public/dist/css/starter": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunk_left4code_tw_starter"] = self["webpackChunk_left4code_tw_starter"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["public/dist/css/starter"], () => (__webpack_require__("./src/js/init.js")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["public/dist/css/starter"], () => (__webpack_require__("./src/css/starter.css")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;